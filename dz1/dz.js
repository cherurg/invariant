// Generated by CoffeeScript 1.9.1
(function() {
  var W, dijkstra, dijkstraResult, i, index, inf, maximum, procedure3;

  inf = Number.POSITIVE_INFINITY;

  W = [[0, 2, 1, inf, inf, inf], [2, 0, inf, 2, 1, inf], [1, inf, 0, 4, 1, inf], [inf, 2, 4, 0, inf, 1], [inf, 1, 1, inf, 0, 1], [inf, inf, inf, 1, 1, 0]];

  dijkstra = function(W, j0) {
    var edge, j, k, l, len, m, n, o, p, q, ref, ref1, ref2;
    l = [];
    m = 1;
    n = W.length;
    ref = W[0];
    for (o = 0, len = ref.length; o < len; o++) {
      edge = ref[o];
      l.push(edge);
    }
    while (m < n) {
      m += 1;
      for (j = p = 0, ref1 = n; 0 <= ref1 ? p < ref1 : p > ref1; j = 0 <= ref1 ? ++p : --p) {
        for (k = q = 0, ref2 = n; 0 <= ref2 ? q < ref2 : q > ref2; k = 0 <= ref2 ? ++q : --q) {
          l[j] = Math.min(l[j], l[k] + W[k][j]);
        }
      }
    }
    return l[j0];
  };

  dijkstraResult = (function() {
    var o, results;
    results = [];
    for (index = o = 0; o <= 5; index = ++o) {
      results.push(dijkstra(W, index));
    }
    return results;
  })();

  console.log(dijkstraResult);

  maximum = function(W, j0) {
    var edge, j, k, l, len, m, n, o, p, q, ref, ref1, ref2;
    l = [];
    m = 1;
    n = W.length;
    ref = W[0];
    for (o = 0, len = ref.length; o < len; o++) {
      edge = ref[o];
      l.push(edge);
    }
    while (m < n) {
      m += 1;
      for (k = p = 0, ref1 = n; 0 <= ref1 ? p < ref1 : p > ref1; k = 0 <= ref1 ? ++p : --p) {
        for (j = q = 0, ref2 = n; 0 <= ref2 ? q < ref2 : q > ref2; j = 0 <= ref2 ? ++q : --q) {
          l[j] = Math.max(l[j], l[k] + W[k][j]);
        }
      }
    }
    return l[j0];
  };

  procedure3 = function(W, j0) {
    var arr, d, edge, i, j, k, len, len1, n, o, p, q, r, ref, ref1;
    d = [];
    k = 0;
    n = W.length;
    for (o = 0, len = W.length; o < len; o++) {
      arr = W[o];
      d.push([]);
      for (p = 0, len1 = arr.length; p < len1; p++) {
        edge = arr[p];
        d[d.length - 1].push(edge);
      }
    }
    while (k < n) {
      for (j = q = 0, ref = n; 0 <= ref ? q < ref : q > ref; j = 0 <= ref ? ++q : --q) {
        for (i = r = 0, ref1 = n; 0 <= ref1 ? r < ref1 : r > ref1; i = 0 <= ref1 ? ++r : --r) {
          d[i][j] = Math.min(d[i][j], d[i][k] + d[k][j]);
        }
      }
      k += 1;
    }
    return d[0][j0];
  };

  console.log((function() {
    var o, results;
    results = [];
    for (i = o = 0; o <= 5; i = ++o) {
      results.push(procedure3(W, i));
    }
    return results;
  })());

}).call(this);
